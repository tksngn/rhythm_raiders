<div class="guest-index">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="mb-1">
          <h1 class="text-center" style="color: red;">Rhythm RAIDERS</h1><br>
          <h3 class="text-center" style="color: red;">ゲストログイン完了</h3><br>
          <h3 class="text-center" style="color: orange;">Guest LogIn  Completed</h3>
        </div>
        <div class="text-center mb-1">
          <p class="text" style="color: black; text-shadow: -1px 0 gray, 0 1px gray, 1px 0 gray, 0 -1px gray; font-size: 0.7em;">
            ようこそゲストさん<br>
            ゲストの皆様、試聴ボタンで30秒だけの楽曲をお楽しみいただけますが、新規登録をしていただくと全曲をご堪能いただけます。
            ぜひこの機会にご登録ください。<br>
            Welcome, Guest!
            As a guest, you can enjoy a 30-second preview of each song with the preview button. However, by registering as a new user, you can enjoy all songs in full. Please take this opportunity to register.
          </p>
        </div>
        <div class="text-center mb-2">
          <%= link_to 'Back to Home', member_top_path, method: :get, class: "button" %>
        </div>
          <!-- 楽曲の一覧を表示するエリア -->
          <% @created_tracks.each do |created_track| %>
            <div class="card mb-2">
              <div class="card-body">
                <div class="track-card">
                  <div class="row">
                    <div class="col-md-8">
                      <div class="track-info">
                        <h3 class="mb-0" style="text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black; font-size: calc(20px + 1vw);">
                          <%= created_track.music_title %>
                        </h3>
                        <div class="card-text" style="font-size: calc(10px + 1vw);">Music Genre: <%= created_track.music_genre %></div>
                        <div class="card-text" style="font-size: calc(10px + 1vw);">Creater Name: <%= created_track.creater_name %></div>
                        <div class="card-text" style="font-size: calc(10px + 1vw);">A word from the creater: <p><%= created_track.creater_word %></p></div>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="controls">
                        <audio controls id="audio-player-<%= created_track.id %>" preload="auto">
                            <source src="<%= created_track.music_file %>" type="audio/mpeg">
                            Your browser does not support the audio element.
                        </audio>
                        <div class="play-pause">
                          <p class="play m-0"></p>
                          <p class="pause m-0"></p>
                          <p class="loading m-0"></p>
                          <p class="error m-0"></p>
                        </div>
                        <div class="time">
                          <div class="current-time">00:00</div>
                          <div class="total-time">00:00</div>
                        </div>
                        <div class="progress position-relative w-100 md-2">
                          <div class="slider position-absolute w-100" style="height: 1rem;"></div>
                          <div class="loaded position-absolute" style="background-color: #f0f0f0; height: 1rem; top: 0;"></div>
                          <div class="pace position-absolute" style="background-color: #000; height: 1rem; top: 0;"></div>
                        </div>
                      </div>
                      <div>
                        <!-- いいね機能の追加 -->
                        <div class="mt-2">
                          <span class="like-button">
                            ♥<%= created_track.likes.count %> いいね
                          </span>
                        </div>
                        <div>
                          <button type="button" class="btn btn-sm btn-outline-secondary1 m-0" onclick="playPreview(<%= created_track.id %>, <%= !current_member.is_guest %>)">Preview</button>
                          <button type="button" class="btn btn-sm btn-outline-secondary stop-button" id="stop-button" onclick="stopPreview();">Stop</button><!-- 追加した停止ボタン -->
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>
      <div class="pagination" style="display: flex; justify-content: center;">
        <% if @created_tracks.empty? %>
          <p class="text-danger">No records found.</p>
        <% else %>
          <p class="text-success">Records found.</p>
          <%= paginate @created_tracks %>
        <% end %>
      </div>

    <script>
      function stopPreview() {
        var audios = document.getElementsByTagName('audio');
        for(var i = 0, len = audios.length; i < len; i++){
            audios[i].pause();
            audios[i].currentTime = 0;
        }
      }

      function playPreview(id, isMember) {
        var audio = document.getElementById('audio-player-' + id);
        var playpause = document.querySelector('.play-pause');
        var currentTime = document.querySelector('.current-time');
        var totalTime = document.querySelector('.total-time');
        var slider = document.querySelector('.slider');
        var loaded = document.querySelector('.loaded');
        var pace = document.querySelector('.pace');
        var stopButton = document.getElementById("stop-button");

        stopButton.addEventListener("click", function() {
          audio.pause(); // 音楽を一時停止
          audio.currentTime = 0; // 再生位置を初めに戻す
        });


        playpause.addEventListener('click', function() {
          if (audio.paused) {
              audio.play();
              playpause.classList.remove('play');
              playpause.classList.add('pause');
          } else {
              audio.pause();
              playpause.classList.remove('pause');
              playpause.classList.add('play');
          }
        });

        audio.addEventListener('timeupdate', function() {
          var curtime = parseInt(audio.currentTime, 10);
          currentTime.textContent = formatTime(curtime);
        });

        audio.addEventListener('durationchange', function() {
          var duration = parseInt(audio.duration, 10);
          totalTime.textContent = formatTime(duration);
        });

        slider.addEventListener('click', function(e) {
          var sliderPos = this.getBoundingClientRect().left + window.pageXOffset
          var pos = (e.pageX - sliderPos) / this.offsetWidth;
          audio.currentTime = pos * audio.duration;
        });

        audio.addEventListener('timeupdate', function() {
          var pos = audio.currentTime / audio.duration;
          pace.style.width = pos * 100 + '%';
          // if (audio.buffered.length > 0) {
          //   var loadPercent = audio.buffered.end(audio.buffered.length - 1) / audio.duration;
          //   console.log(Number(loadPercent) * 100);  // ここでloadPercentの値を確認
          //   loaded.style.width = loadPercent * 1000 + '%';
          // };
        });

        audio.addEventListener('progress', function() {
          // if (audio.buffered.length > 0) {
          //   var loadPercent = audio.buffered.end(audio.buffered.length - 1) / audio.duration;
          //   console.log(loadPercent);  // ここでloadPercentの値を確認
          //   loaded.style.width = loadPercent * 100 + '%';
          // };
        });

        function formatTime(time) {
          var minutes = Math.floor(time / 60);
          var seconds = time - minutes * 60;
          seconds = seconds < 10 ? '0' + seconds : seconds;
          return minutes + ':' + seconds;
        }

        audio.currentTime = 0;
        audio.volume = 1; // ボリュームを最大に設定
        audio.play();

        if (!isMember) {
           // ゲストの場合、再生ボタンを非表示にする
          playpause.style.display = 'none';
          let fadePoint = 30; // フェードアウトを開始する時間（秒）
          let fadeDuration = 5; // フェードアウトの期間（秒）
          let fadeAudio = setInterval(function () {
            // フェードアウトを開始
            if (audio.currentTime >= fadePoint) {
              let fadeAmount = 1 / (fadeDuration * 10); // 10はsetIntervalの頻度に基づく
              audio.volume = Math.max(audio.volume - fadeAmount, 0); // ボリュームが0未満にならないようにする

              // ボリュームが0になったらオーディオを停止
              if (audio.volume <= 0) {
                audio.pause();
                audio.currentTime = 0; // 追加: 再生位置を初めに戻す
                clearInterval(fadeAudio);
              }
            }
          }, 100); // 0.1秒ごとにボリュームを更新
        }
      }
    </script>
  </div>
</div>


